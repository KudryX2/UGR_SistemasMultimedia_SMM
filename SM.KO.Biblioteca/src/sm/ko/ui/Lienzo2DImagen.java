/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.ko.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

/**
 *
 * @author Kudry
 */
public class Lienzo2DImagen extends Lienzo2D {

    private BufferedImage image;
    private boolean background;
    
    /**
     * Contructor de la clase Lienzo2DImagen
     */
    public Lienzo2DImagen() {
        super();
        initComponents();
        image = new BufferedImage(300,300,BufferedImage.TYPE_INT_ARGB);
        background = true;        
    }
    
    /**
     * Dibuja las formas contenidas en el lienzo y la imagen almacenada
     * @param g 
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
                
        g.drawImage(image, 0, 0, this);
        
        if(background){
            g.setColor(Color.white);
            g.fillRect(0, 0, 300, 300);
        }
                
    }
    
    /**
     * Actualiza la imagen almacenada
     * @param image imagen nueva
     */
    public void setImage(BufferedImage image){
    
        if(image != null){
            this.image = image;
            setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
            background = false;
        }
    }
    
    /**
     * Devuelve la imagen almacenada
     * @return imagen
     */
    public BufferedImage getImage(){
        return image;
    }
    
    /**
     * Si se pasa valor true devuelve una imagen que contiene la imagen
     * almacenada y las figuras dibujadas en el lienzo. Si recibe el valor
     * false solo devuelve la imagen almacenada.
     * @param drawVector
     * @return 
     */
    public BufferedImage getImage(boolean drawVector){
        if(drawVector){
            BufferedImage img = new BufferedImage(this.getWidth(),this.getHeight(),BufferedImage.TYPE_INT_ARGB);
            this.paint(img.createGraphics());
            return img;
        }else{
            return getImage();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
